{"version":3,"sources":["../src/index.ts","../src/utils/blockBuilder.ts","../src/utils/field.ts","../src/utils/createBlock.ts","../src/utils/createCollectionConfig.ts","../src/utils/createField.ts","../src/utils/createFieldOptions.ts","../src/utils/createGlobalConfig.ts","../src/utils/getLocale.ts","../src/utils/getPayloadContext.ts","../src/utils/getReference.ts","../src/utils/getRelation.ts"],"sourcesContent":["export * from './types.js'\n\nexport * from './utils/blockBuilder.js'\nexport * from './utils/createBlock.js'\nexport * from './utils/createCollectionConfig.js'\nexport * from './utils/createField.js'\nexport * from './utils/createFieldOptions.js'\nexport * from './utils/createGlobalConfig.js'\nexport * from './utils/field.js'\nexport * from './utils/getLocale.js'\nexport * from './utils/getPayloadContext.js'\nexport * from './utils/getReference.js'\nexport * from './utils/getRelation.js'\n","import type { Block } from 'payload'\n\ntype BlockConfig = Record<string, (props: unknown) => Block>\ntype BlockKey = keyof BlockConfig\n\nexport const blockBuilder = (config: BlockConfig) => {\n  const helper = blockBuilderHelper({\n    config,\n  })\n\n  return helper\n}\n\nexport const blockBuilderHelper = (props: { config: BlockConfig }) => {\n  const { config } = props\n\n  let blockKeys =\n    Object.keys(config).filter((b) => {\n      const blockSettings = config[b]\n\n      if (typeof blockSettings === 'boolean' && blockSettings === false) {\n        return false\n      }\n\n      return true\n    }) || []\n\n  const exclude = (...blocks: BlockKey[]) => {\n    // Filter out block keys that are included in the blocks parameter\n    blockKeys = blockKeys.filter((key: BlockKey) => !blocks.includes(key))\n    return builder\n  }\n\n  const filter = (predicate: (value: string, index: number) => boolean) => {\n    blockKeys = blockKeys.filter(predicate)\n  }\n\n  const only = (...blocks: BlockKey[]) => {\n    // Filter out block keys that are not included in the blocks parameter\n    blockKeys = blockKeys.filter((key: BlockKey) => blocks.includes(key))\n    return builder\n  }\n\n  const build = (params?: unknown): Block[] => {\n    const blocks = blockKeys.map((key) => {\n      const block = config[key]\n\n      if (!block) {\n        console.error(`Block ${key} not found in blockMap`)\n        return null\n      }\n      return block(params)\n    })\n    return blocks.filter((b) => b !== null)\n  }\n\n  const builder = {\n    build,\n    exclude,\n    filter,\n    only,\n  }\n\n  return builder\n}\n","import type { Field } from 'payload'\n\nconst getBaseProperties = () => {\n  return {}\n}\nexport const field = (props: Field): Field => {\n  const base = getBaseProperties()\n\n  return {\n    ...base,\n    ...props,\n  } as Field\n}\n","import type { Block } from 'payload'\n\nimport { field } from './field.js'\n\nexport const createBlock = (block: Block): Block => {\n  const fallbackInterfaceName = () =>\n    block.slug.includes('Block') ? block.slug : `${block.slug}Block`\n\n  return {\n    ...block,\n    interfaceName: block?.interfaceName || fallbackInterfaceName(),\n  }\n}\ntype BlockWithSettingsProps<P = unknown> = P\ntype BlockWithSettingsFn = <P>(props: BlockWithSettingsProps<P>) => Block\nexport const createBlockWithSettings = (fn: BlockWithSettingsFn) => {\n  return (props: BlockWithSettingsProps) => {\n    const result = fn(props)\n\n    return createBlock({\n      ...result,\n      fields: [\n        field({\n          type: 'tabs',\n          tabs: [\n            { fields: result.fields, label: 'Content' },\n            {\n              name: 'settings',\n              fields: [\n                field({\n                  name: 'className',\n                  type: 'text',\n                  admin: {\n                    description: 'Adds custom classes to the block',\n                  },\n                  hasMany: true,\n                  label: 'Class Name',\n                }),\n                field({\n                  name: 'id',\n                  type: 'text',\n                  admin: {\n                    description: 'Add custom ID to the block',\n                  },\n                  label: 'ID',\n                  required: false,\n                }),\n              ],\n              label: 'Settings',\n            },\n          ],\n        }),\n      ],\n    })\n  }\n}\n","import type { CollectionConfig } from 'payload'\n\nexport const createCollectionConfig = (config: CollectionConfig): CollectionConfig => {\n  return {\n    access: {\n      read: () => true,\n      ...config.access,\n    },\n    ...config,\n  }\n}\n","import type { Field } from 'payload'\n\nimport { deepMerge } from '@konstant/utilities-ui'\n\nexport type FieldCreateType<P = unknown> = {\n  condition?: (data: any, siblingData: any) => boolean\n  description?: string\n  fields?: Field[]\n  hidden?: boolean\n  hideGutter?: boolean\n  label?: string\n  localized?: boolean\n  name?: string\n  overrides?: Record<string, unknown>\n  required?: boolean\n} & P\n\ntype FieldCreationFunction<P = unknown> = (props: FieldCreateType<P>) => Field\n\nexport function createField<P>(fieldFn: FieldCreationFunction<P>) {\n  return (props: FieldCreateType<P> = {} as FieldCreateType<P>): Field => {\n    const field = fieldFn(props)\n    return deepMerge<Field>(field, props.overrides || {})\n  }\n}\n","import { createObjectKeys, toCapitalized } from '@konstant/utilities-ui'\n\n// Define a utility type to extract the keys from a union type\ntype ExtractKeys<T> = T extends string ? T : never\n\n// Create a generic function to create the record and options based on the type\nexport const createFieldOptions = <T extends string>(keys: ExtractKeys<T>[]) => {\n  const values = createObjectKeys(keys)\n\n  const options = keys.map((key) => ({\n    label: toCapitalized(key),\n    value: key,\n  }))\n\n  return { options, values }\n}\n","import type { GlobalConfig } from 'payload'\n\nexport const createGlobalConfig = (config: GlobalConfig): GlobalConfig => {\n  return {\n    access: {\n      read: () => true,\n      ...config.access,\n    },\n    ...config,\n  }\n}\n","import type { BasePayload, SanitizedConfig } from 'payload'\n\n/**\n * Checks if a given string is a valid locale.\n * @param locale The locale string to validate.\n * @returns The validated locale if valid, otherwise throws an error.\n */\nconst isLocale = (locale: null | string | undefined, localeCodes: string[]): boolean => {\n  if (!locale) {\n    return false\n  }\n\n  return localeCodes.includes(locale)\n}\n\n/**\n * Validates and returns the locale.\n * @param locale The locale string to validate.\n * @returns The validated locale.\n */\nexport const getLocale = (config: SanitizedConfig, locale: null | string | undefined): string => {\n  const { localization } = config\n  if (!localization) {\n    throw new Error(`Localization is not supported by Payload`)\n  }\n  const { defaultLocale, localeCodes } = localization\n\n  if (isLocale(locale, localeCodes)) {\n    return locale as string\n  }\n\n  return defaultLocale\n}\n","import type { SanitizedConfig } from 'payload'\n\nimport { draftMode } from 'next/headers.js'\nimport { getPayload } from 'payload'\n\nimport type { PayloadQuery } from '../types.js'\n\nimport { getLocale } from './getLocale.js'\n\nexport const getPayloadContext = async (\n  config: Promise<SanitizedConfig> | SanitizedConfig,\n  params: PayloadQuery,\n) => {\n  const { isEnabled: draft } = await draftMode()\n  const payload = await getPayload({ config })\n  const processedLocale = getLocale(payload.config, params.locale)\n  const query = {\n    draft,\n    locale: processedLocale,\n    overrideAccess: draft,\n  }\n  return { draft, locale: processedLocale, payload, query }\n}\n","export function getReference<T>(value: null | string | T | undefined) {\n  const isResolved = typeof value !== 'string'\n\n  return isResolved ? (value as T) : null\n}\n","import { getReference } from './getReference.js'\n\ntype RelationProps<T> = {\n  relationTo: string\n  value: string | T\n}\n\ntype FetchQuery<T> = (params: { collection: string; id: string }) => Promise<T>\n\nexport const getRelation = <T>(props: RelationProps<T>) => {\n  const { relationTo, value } = props\n\n  const getValue = (): null | T => getReference(value)\n\n  const fetch = async (query: FetchQuery<T>) => {\n    return await query({\n      id: value as string,\n      collection: relationTo,\n    })\n  }\n\n  const getOrFetchValue = async (query: FetchQuery<T>): Promise<null | T> => {\n    const resolvedValue = getValue()\n    if (resolvedValue !== null) {\n      return resolvedValue\n    }\n\n    const result = fetch(query)\n    return result\n  }\n\n  return {\n    getOrFetchValue,\n    getValue,\n    relationTo,\n  }\n}\n"],"mappings":"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","names":["field","import_utilities_ui"]}