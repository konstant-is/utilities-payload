{"version":3,"sources":["../../src/queries/getDocumentById.ts"],"sourcesContent":["import type { CollectionSlug, SanitizedConfig } from 'payload'\nimport type { PayloadQuery } from 'src/types.js'\n\nimport { cache } from 'react'\n\nimport { getPayloadContext } from '../utils/getPayloadContext.js'\n\ntype GetDocumentByIdQuery = PayloadQuery<{\n  collection: CollectionSlug\n  id: string\n}>\nexport const getDocumentById = cache(\n  async (config: Promise<SanitizedConfig> | SanitizedConfig, params: GetDocumentByIdQuery) => {\n    try {\n      const { id, collection } = params\n      const { payload, query } = await getPayloadContext(config, params)\n\n      console.info(`Fetching ${collection} with id: ${id}`)\n      const result = await payload.findByID({\n        id,\n        collection,\n        ...query,\n        depth: 30,\n      })\n\n      if (!result) {\n        throw new Error(`Document with id ${id} not found in collection ${collection}`)\n      }\n\n      return result\n    } catch (error) {\n      console.error(error)\n      return null\n    }\n  },\n)\n"],"mappings":";;;;;;AAGA,SAAS,aAAa;AAQf,IAAM,kBAAkB;AAAA,EAC7B,OAAO,QAAoD,WAAiC;AAC1F,QAAI;AACF,YAAM,EAAE,IAAI,WAAW,IAAI;AAC3B,YAAM,EAAE,SAAS,MAAM,IAAI,MAAM,kBAAkB,QAAQ,MAAM;AAEjE,cAAQ,KAAK,YAAY,UAAU,aAAa,EAAE,EAAE;AACpD,YAAM,SAAS,MAAM,QAAQ,SAAS;AAAA,QACpC;AAAA,QACA;AAAA,QACA,GAAG;AAAA,QACH,OAAO;AAAA,MACT,CAAC;AAED,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI,MAAM,oBAAoB,EAAE,4BAA4B,UAAU,EAAE;AAAA,MAChF;AAEA,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,MAAM,KAAK;AACnB,aAAO;AAAA,IACT;AAAA,EACF;AACF;","names":[]}